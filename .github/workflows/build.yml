# https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions
name: XCrawler - Build & Tests

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
on:
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize ]

jobs:

  sonar_cloud:
    name: SonarCloud
    runs-on:
      - self-hosted
      - ubuntu
    steps:
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.PUBLIC_SONAR_TOKEN }}

      - name: Post to a Slack channel
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: 'github-notifications'
          # For posting a simple plain text message
          payload: |
            {
            	"attachments": [
            		{
            			"color": "#FF0000",
            			"blocks": [
            				{
            					"type": "section",
            					"text": {
            						"type": "mrkdwn",
            						"text": "Sonarcloud failed"
            					}
            				},
            				{
            					"type": "section",
            					"fields": [
            						{
            							"type": "mrkdwn",
            							"text": "*Name:*\n ${{ github.event_name }} "
            						},
            						{
            							"type": "mrkdwn",
            							"text": "*Type:*\n ${{ github.event.action }} ${{ github.event.ref_type }} ${{ github.event.ref }}"
            						}
            					]
            				},
            				{
            					"type": "section",
            					"fields": [
            						{
            							"type": "mrkdwn",
            							"text": "*Branch:*\n ${{ github.event.pull_request.head.ref }}"
            						},
            						{
            							"type": "mrkdwn",
            							"text": "*Status:*\n `${{ job.status }}`"
            						}
            					]
            				},
            				{
            					"type": "context",
            					"elements": [
            						{
            							"type": "mrkdwn",
            							"text": "${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            						}
            					]
            				}
            			]
            		}
            	]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.PUBLIC_SLACK_BOT_TOKEN }}

  security_check:
    name: Security Check
    runs-on:
      - self-hosted
      - ubuntu

    steps:
      - name: Clean up .scannerwork folder
        run: sudo rm -rf .scannerwork

      - name: Checkout
        uses: actions/checkout@v3

      - name: The PHP Security Checker
        uses: symfonycorp/security-checker-action@v4

      - name: PHP Security Checker
        uses: StephaneBour/actions-php-security-checker@1.1
        with:
          composer-lock: './composer.lock'

      - name: Post to a Slack channel
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: 'github-notifications'
          # For posting a simple plain text message
          payload: |
            {
            	"attachments": [
            		{
            			"color": "#FF0000",
            			"blocks": [
            				{
            					"type": "section",
            					"text": {
            						"type": "mrkdwn",
            						"text": "Security failed"
            					}
            				},
            				{
            					"type": "section",
            					"fields": [
            						{
            							"type": "mrkdwn",
            							"text": "*Name:*\n ${{ github.event_name }} "
            						},
            						{
            							"type": "mrkdwn",
            							"text": "*Type:*\n ${{ github.event.action }} ${{ github.event.ref_type }} ${{ github.event.ref }}"
            						}
            					]
            				},
            				{
            					"type": "section",
            					"fields": [
            						{
            							"type": "mrkdwn",
            							"text": "*Branch:*\n ${{ github.event.pull_request.head.ref }}"
            						},
            						{
            							"type": "mrkdwn",
            							"text": "*Status:*\n `${{ job.status }}`"
            						}
            					]
            				},
            				{
            					"type": "context",
            					"elements": [
            						{
            							"type": "mrkdwn",
            							"text": "${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            						}
            					]
            				}
            			]
            		}
            	]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.PUBLIC_SLACK_BOT_TOKEN }}

      - name: Clean up .scannerwork folder
        run: sudo rm -rf .scannerwork


  #      - name: Psalm
  #        uses: docker://ghcr.io/psalm/psalm-github-actions
  #        with:
  #          security_analysis: true
  #          report_file: results.sarif
  #      - name: Upload Psalm Security Analysis results to GitHub
  #        uses: github/codeql-action/upload-sarif@v2
  #        with:
  #          sarif_file: results.sarif

  #  pint:
  #    name: "laravel-pint"
  #    uses: aglipanci/laravel-pint-action@2.0.0
  #    with:
  #      preset: laravel
  #      verboseMode: true
  #      testMode: true
  #      configPath: "./pint.json"
  #      pintVersion: 1.8.0
  #      onlyDirty: true

  code_standards:
    name: Code standards check
    needs: [ sonar_cloud, security_check ]
    strategy:
      matrix:
        lint: [ phpstan, phpmd, phpcs ]

    runs-on:
      - self-hosted
      - ubuntu

    steps:
      - name: Clean up .scannerwork folder
        run: sudo rm -rf .scannerwork

      - uses: actions/checkout@v4

      - name: Setup PHP with pre-release PECL extension
        uses: shivammathur/setup-php@v2
        env:
          runner: self-hosted
        with:
          php-version: '8.2'
          extensions: mbstring, intl, redis, pdo_mysql, mongodb, gd, pcntl
          coverage: pcov

      - name: Setup application
        if: success()
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          composer install --no-ansi --no-scripts --no-progress --prefer-dist

      - name: Lint
        run: composer ${{ matrix.lint }}

  tests:
    name: Execute UnitTest
    strategy:
      matrix:
        lint: [ Client, JAV, Flickr, Core ]

    runs-on:
      - self-hosted
      - ubuntu

    needs: [ code_standards ]

    services:
      mariadb:
        image: mariadb
        ports:
          - 3306:3306
        env:
          MARIADB_DATABASE: laravel
          MARIADB_PASSWORD: root
          MARIADB_ROOT_PASSWORD: root

      mongodb:
        image: mongo
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP with pre-release PECL extension
        uses: shivammathur/setup-php@v2
        env:
          runner: self-hosted
        with:
          php-version: '8.2'
          extensions: mbstring, intl, redis, pdo_mysql, mongodb, gd
          coverage: pcov

      - name: Setup application
        if: success()
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          composer install --no-ansi --no-scripts --no-progress --prefer-dist
          php artisan key:generate
          chmod -R 777 storage bootstrap/cache
          php artisan config:clear
          php artisan migrate:fresh

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        if: success()
        run: |
          ./vendor/bin/phpunit --coverage-clover coverage-tests-${{ matrix.lint }}.xml --testsuite=${{ matrix.lint }}

      - name: Coverage
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: coverage-reports
          path: coverage-tests-${{ matrix.lint }}.xml
          retention-days: 1

  finalizing_build:
    name: "All Parallel Tests passed"
    runs-on:
      - self-hosted
      - ubuntu
    needs: [ tests ]

    steps:
      - name: Download build from artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports
          path: ./reports

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        if: success() && github.event.pull_request.draft == false
        env:
          CODECOV_TOKEN: ${{ secrets.PUBLIC_CODECOV_TOKEN }}
          directory: ./reports

      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - uses: actions/checkout@v4
