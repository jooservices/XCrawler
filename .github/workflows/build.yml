# https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions
name: XCrawler - Build & Tests

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
on:
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize ]

jobs:

#  code_standards:
#    name: Code standards check
#    strategy:
#      matrix:
#        lint: [ phpstan, phpmd, phpcs ]
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Setup PHP with pre-release PECL extension
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: '8.2'
#          extensions: mbstring, intl, redis, pdo_mysql, mongodb, gd
#          coverage: pcov
#
#      - name: Setup application
#        if: success()
#        run: |
#          php -r "file_exists('.env') || copy('.env.example', '.env');"
#          composer install --no-ansi --no-scripts --no-progress --prefer-dist
#
#      - name: Lint
#        run: composer ${{ matrix.lint }}
#
#  tests:
#    name: Execute UnitTest
#
#    runs-on: ubuntu-latest
#
#    needs: [ code_standards ]
#
#    services:
#      mariadb:
#        image: mariadb
#        ports:
#          - 3306:3306
#        env:
#          MARIADB_DATABASE: laravel
#          MARIADB_PASSWORD: root
#          MARIADB_ROOT_PASSWORD: root
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Setup PHP with pre-release PECL extension
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: '8.2'
#          extensions: mbstring, intl, redis, pdo_mysql, mongodb, gd
#          coverage: pcov
#
#      - name: Setup application
#        if: success()
#        run: |
#          php -r "file_exists('.env') || copy('.env.example', '.env');"
#          composer install --no-ansi --no-scripts --no-progress --prefer-dist
#          php artisan key:generate
#          chmod -R 777 storage bootstrap/cache
#          php artisan config:clear
#          php artisan migrate:fresh
#
#      - name: Execute tests (Unit and Feature tests) via PHPUnit
#        if: success()
#        run: composer test

  #      - name: Coverage
  #        uses: actions/upload-artifact@v3
  #        if: success()
  #        with:
  #          name: coverage-reports
  #          path: coverage-tests-${{ matrix.lint }}.xml

  finalizing_build:
    name: "All Parallel Tests passed"
    runs-on: ubuntu-latest
    #needs: [ tests ]

    steps:
      #      - name: Download build from artifact
      #        uses: actions/download-artifact@v2
      #        with:
      #          name: coverage-reports
      #          path: ./reports
      #
      #      - name: upload coverage to codecov.io
      #        uses: codecov/codecov-action@v1
      #        if: success() && github.event.pull_request.draft == false
      #        with:
      #          token: ${{ secrets.CODECOV_TOKEN }}
      #          directory: ./reports

      - name: Slack Notification
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: 'xcrawler-github'

          # This data can be any valid JSON from a previous step in the GitHub Action
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Github Action completed",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Type:*\n ${{ github.event_name }} "
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Ref:*\n ${{ github.event.ref }}"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                    }
                  ]
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "${{ github.event }}"
                    }
                  ]
                }
              ]
            }

#      - name: "Finalizing Tasks"
#        if: success()
#        run: |
#          echo "Build finished"
